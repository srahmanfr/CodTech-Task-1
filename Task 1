import re

def check_password_strength(password):
    """
    Assess the strength of a password based on its length, complexity, and uniqueness.

    Parameters:
    password (str): The password to be assessed.

    Returns:
    str: Feedback on password strength.
    """
    strength_score = 0
    feedback = []

    # Check length
    if len(password) >= 12:
        strength_score += 2
        feedback.append("Good length (12+ characters).")
    elif len(password) >= 8:
        strength_score += 1
        feedback.append("Moderate length (8-11 characters).")
    else:
        feedback.append("Too short (less than 8 characters). Consider making it longer.")

    # Check for complexity: uppercase, lowercase, numbers, special characters
    if re.search(r'[A-Z]', password):
        strength_score += 1
        feedback.append("Includes uppercase letters.")
    else:
        feedback.append("Add uppercase letters for more strength.")

    if re.search(r'[a-z]', password):
        strength_score += 1
        feedback.append("Includes lowercase letters.")
    else:
        feedback.append("Add lowercase letters for more strength.")

    if re.search(r'[0-9]', password):
        strength_score += 1
        feedback.append("Includes numbers.")
    else:
        feedback.append("Add numbers to increase security.")

    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        strength_score += 1
        feedback.append("Includes special characters.")
    else:
        feedback.append("Add special characters for extra security.")

    # Check for uniqueness (repeated characters or patterns)
    if len(set(password)) >= len(password) * 0.7:
        strength_score += 1
        feedback.append("Good uniqueness with minimal repeated characters.")
    else:
        feedback.append("Avoid repeated characters or patterns for better uniqueness.")

    # Final feedback based on score
    if strength_score >= 7:
        feedback.insert(0, "Password Strength: Strong")
    elif 4 <= strength_score < 7:
        feedback.insert(0, "Password Strength: Moderate")
    else:
        feedback.insert(0, "Password Strength: Weak")

    return "\n".join(feedback)

# Example usage
if __name__ == "__main__":
    print("Enter a password to assess its strength:")
    user_password = input()
    print(check_password_strength(user_password))
